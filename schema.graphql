# https://thegraph.com/docs/en/developing/creating-a-subgraph/#one-to-many-relationships

type User @entity {
  id: Bytes!
  adminOfCommunities: [Raft!] @derivedFrom(field: "admins")
  ownerOfCommunities: [Raft!] @derivedFrom(field: "owner")
  badges: [Badge!] @derivedFrom(field: "owner")
  totalBadgesCount: Int!
}

type Raft @entity {
  id: ID!
  metadata: RaftMetadata
  uri: String!
  owner: User!
  tokenId: BigInt!
  specs: [BadgeSpec!]! @derivedFrom(field: "raft")
  admins: [User!]!
  totalSpecsCount: Int!
  totalBadgesCount: Int!
  createdAt: Int!
  createdBy: String!
  transactionHash: String!
}

type RaftMetadata @entity {
  id: ID!
  name: String!
  description: String!
  image: String!
}

type BadgeSpec @entity {
  id: String!
  metadata: SpecMetadata
  uri: String!
  specUri: String!
  raft: Raft!
  badges: [Badge!]! @derivedFrom(field: "spec")
  totalBadgesCount: Int!
  createdAt: Int!
  createdBy: String!
  transactionHash: String!
}

type SpecMetadata @entity {
  schema: String
  id: ID!
  name: String!
  description: String!
  image: String!
  expiresAt: String
  externalUrl: String
}

type Badge @entity {
  id: String!
  from: Bytes!
  owner: User!
  spec: BadgeSpec!
  createdAt: Int!
  status: String
  statusReason: String
  statusUpdatedAt: Int
  statusUpdatedBy: String
  transactionHash: String!
}
